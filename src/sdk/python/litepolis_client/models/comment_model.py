# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CommentModel(BaseModel):
    """
    CommentModel
    """ # noqa: E501
    comment_id: Optional[StrictInt] = None
    comment: Optional[StrictStr] = None
    user_id: Optional[StrictInt] = None
    conversation_id: Optional[StrictInt] = None
    task: Optional[StrictStr] = None
    vote: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["comment_id", "comment", "user_id", "conversation_id", "task", "vote"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CommentModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if comment_id (nullable) is None
        # and model_fields_set contains the field
        if self.comment_id is None and "comment_id" in self.model_fields_set:
            _dict['comment_id'] = None

        # set to None if comment (nullable) is None
        # and model_fields_set contains the field
        if self.comment is None and "comment" in self.model_fields_set:
            _dict['comment'] = None

        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict['user_id'] = None

        # set to None if conversation_id (nullable) is None
        # and model_fields_set contains the field
        if self.conversation_id is None and "conversation_id" in self.model_fields_set:
            _dict['conversation_id'] = None

        # set to None if task (nullable) is None
        # and model_fields_set contains the field
        if self.task is None and "task" in self.model_fields_set:
            _dict['task'] = None

        # set to None if vote (nullable) is None
        # and model_fields_set contains the field
        if self.vote is None and "vote" in self.model_fields_set:
            _dict['vote'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CommentModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comment_id": obj.get("comment_id"),
            "comment": obj.get("comment"),
            "user_id": obj.get("user_id"),
            "conversation_id": obj.get("conversation_id"),
            "task": obj.get("task"),
            "vote": obj.get("vote")
        })
        return _obj


